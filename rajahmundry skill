// This sample demonstrates handling intents from an Alexa skill using the Alexa Skills Kit SDK (v2).
// Please visit https://alexa.design/cookbook for additional examples on implementing slots, dialog management,
// session persistence, api calls, and more.
const Alexa = require('ask-sdk-core');
const data = [
    
  'Rajahmundry was first called as Rajamahendravaram or Rajamahendri. This was during the Chalukya Dynastys reign. It was named after the Chalukya king Raja Raja Narendra.',

'As per 2011 census, Rajahmundry is the 6th most populated city among the cities of both the Telugu states.',

'Durga CineTone was started in Rajahmundry in 1936. It is the first Telugu studio built in Andhra Pradesh. And is also one of the first 3 studios built in South India.',

'In 1602, the Dutch constructed a fort in Rajahmundry spread over 196 acres with 37.24 acres of buildings. It was later converted to the famous Rajahmundry central Jail in British rule. This is where Ramgopal Varma gets most of his stories from.',

'This city is acclaimed as the birthplace of the Telugu language and its literature. The first poet of telugu Aadi Kavi Nannaya is from Rajahmundry itslef. And so are the legendary poets like Tikkana and Yerrana who are collectively called as Kavi Trayam.',

'Kandukuri Veeresalingam garu rejuvenated Telugu literature with his acclaimed work on Telugu literature. He was awarded the prestigious Rao Bahaddur title.',

'Among all the varieties of banana Chakkerakeli has a mouth-watering taste. Pootarekulu or the Paper sweets give an appearance of a folded paper. And they surely are tasty. Both of these have its sources from East Godavari and are favourite of the people, both home and abroad.',

'The Dowleswaram Barrage was constructed in 1850 by Sir Arthur Cotton. This barrage helped in averting countless famines and stimulated the economy of Andhra Pradesh since its construction.',

'Sir Arthur Cotton Museum located in Dowleswaram beside the barrage is the only Civil Engineering Museum in the state.',

'Rajahmundry is the major host of Godavari Maha Pushkaralu. Godavari Pushkaralu is a sacred Hindu festival held once in every 12 years on the banks of river Godavari.',

'Cloth market in Rajahmundry is one of the largest in India with numerous co-operative handloom houses. This city is home for the most diverse cloth merchants.',

'Rajahmundry is one of the largest bullion markets in India. There are hundreds of gold, silver and platinum shops throughout the city.',


];


const GET_FACT_MESSAGE = "  " ;

const LaunchRequestHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'LaunchRequest';
    },
    handle(handlerInput) {
        const speechText = 'Welcome to Rajahmundry facts. you can ask me facts of Rajahmundry';
        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)
            .getResponse();
    }
};
const amanintentHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest'
            && handlerInput.requestEnvelope.request.intent.name === 'amanintent';
    },
    handle(handlerInput) {
        const factArr = data;
        const factIndex = Math.floor(Math.random() * factArr.length);
        const randomFact = factArr[factIndex];
        const speechOutput = GET_FACT_MESSAGE + randomFact;


        const speechText = speechOutput;
        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)
            //.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};
const HelpIntentHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest'
            && handlerInput.requestEnvelope.request.intent.name === 'AMAZON.HelpIntent';
    },
    handle(handlerInput) {
        const speechText = 'You can ask me about a Rajahmundry facts';

        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)
            .getResponse();
    }
};
const CancelAndStopIntentHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest'
            && (handlerInput.requestEnvelope.request.intent.name === 'AMAZON.CancelIntent'
                || handlerInput.requestEnvelope.request.intent.name === 'AMAZON.StopIntent');
    },
    handle(handlerInput) {
        const speechText = 'Goodbye!';
        return handlerInput.responseBuilder
            .speak(speechText)
            .getResponse();
    }
};
const SessionEndedRequestHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'SessionEndedRequest';
    },
    handle(handlerInput) {
        // Any cleanup logic goes here.
        return handlerInput.responseBuilder.getResponse();
    }
};

// The intent reflector is used for interaction model testing and debugging.
// It will simply repeat the intent the user said. You can create custom handlers
// for your intents by defining them above, then also adding them to the request
// handler chain below.
const IntentReflectorHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest';
    },
    handle(handlerInput) {
        const intentName = handlerInput.requestEnvelope.request.intent.name;
        const speechText = `You just triggered ${intentName}`;

        return handlerInput.responseBuilder
            .speak(speechText)
            //.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};

// Generic error handling to capture any syntax or routing errors. If you receive an error
// stating the request handler chain is not found, you have not implemented a handler for
// the intent being invoked or included it in the skill builder below.
const ErrorHandler = {
    canHandle() {
        return true;
    },
    handle(handlerInput, error) {
        console.log(`~~~~ Error handled: ${error.message}`);
        const speechText = `Sorry, I couldn't understand what you said. Please try again.`;

        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)
            .getResponse();
    }
};

// This handler acts as the entry point for your skill, routing all request and response
// payloads to the handlers above. Make sure any new handlers or interceptors you've
// defined are included below. The order matters - they're processed top to bottom.
exports.handler = Alexa.SkillBuilders.custom()
    .addRequestHandlers(
        LaunchRequestHandler,
        amanintentHandler,
        HelpIntentHandler,
        CancelAndStopIntentHandler,
        SessionEndedRequestHandler,
        IntentReflectorHandler) // make sure IntentReflectorHandler is last so it doesn't override your custom intent handlers
    .addErrorHandlers(
        ErrorHandler)
    .lambda();
